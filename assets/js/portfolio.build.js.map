{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////usr/local/lib/node_modules/shufflejs/dist/shuffle.esm.js","webpack:///./assets/js/portfolio.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","E","on","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","evtArr","len","length","evts","liveEvents","tinyEmitter","proto","Element","vendor","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","el","selector","nodeType","nodes","parentNode","querySelectorAll","throttleit","func","wait","args","rtn","timeoutID","last","delta","Date","setTimeout","noop","getNumber","parseFloat","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","descriptor","writable","key","protoProps","staticProps","possibleConstructorReturn","ReferenceError","Point","x","y","a","b","Rect","w","h","id","left","top","width","height","Classes","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","ShuffleItem","element","isVisible","isHidden","classList","remove","add","removeAttribute","setAttribute","addClasses","applyCss","Css","INITIAL","scale","Scale","point","classes","_this","forEach","className","_this2","obj","_this3","keys","style","removeClasses","position","visibility","will-change","before","opacity","after","transitionDelay","shuffle_esm_element","document","body","documentElement","createElement","cssText","appendChild","ret","window","getComputedStyle","getNumberStyle","styles","undefined","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","removeChild","defaults$1","reverse","by","compare","randomize","sorter","arr","options","opts","assign","original","Array","from","revert","array","Math","floor","random","temp","sort","valA","valB","transitions","eventName","count","cancelTransitionEnd","removeEventListener","onTransitionEnd","evt","currentTarget","addEventListener","arrayMax","max","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","round","min","ceil","getAvailablePositions","positions","available","getShortColumn","buffer","minPosition","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","lastItem","end","offset","finalRects","canMove","newRects","every","newRect","noOverlap","some","intersects","intersectingRect","rowIndex","findIndex","items","includes","splice","concat","map","arrayUnique","Set","id$1","Shuffle","_TinyEmitter","__proto__","getPrototypeOf","delimeter","delimiter","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_getElementOption","_init","subClass","superClass","create","constructor","setPrototypeOf","inherits","_getItems","sizer","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttle","throttleTime","option","querySelector","jquery","overflow","category","collection","set$$1","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","_ref","show","hide","init","dispose","visibleItems","_getFilteredItems","_options","positionProps","useTransforms","cssProps","k","replace","str","m1","toLowerCase","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","itemSelector","indexOf","gutterSize","size","gutterWidth","gutter","_getGutterSize","_getColumnSize","calculatedColumns","columnThreshold","cols","colWidth","_getContainerSize","index","staggerAmount","staggerAmountMax","shuffle","_this4","itemPositions","_getNextPositions","equals","getStylesForTransition","_getStaggerAmount","_this5","isCentered","itemsData","itemSize","_getItemPosition","getTransformedPositions","gridSize","total","span","setY","shortColumnIndex","setHeight","getItemPosition","_this6","_getConcealedItems","update","styleObject","roundTransforms","transform","itemCallback","done","_this7","_whenTransitionDone","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","_dispatch","EventType","LAYOUT","_this8","fns","context","pending","finished","results","maybeDone","err","result","arrayParallel","_getTransitionFunction","_movementFinished","objects","elements","_skipTransitions","sortObj","_filter","_shrink","_updateItemCount","sortOptions","_resetCols","_layout","_processQueue","_setContainerSize","isOnlyLayout","newItems","_this9","sortedItems","_mergeNewItems","allSortedItemsSet","isNewItem","applyHiddenState","isUpdateLayout","_this10","oldItems","getItemByElement","_disposeItems","REMOVED","find","_this11","includeMargins","duration","delay","ALL","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions","shuffle_esm","InitShuffle","groups","filters","_bindEventListeners","_onGroupChange","_handleGroupChange","button","_getCurrentGroupFilters","contains","filterGroup","btn","isActive","btnGroup","_removeActiveClassFromChildren","parent","hasActiveFilters","itemPassesFilters","demo","getElementById"],"mappings":"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","file":"portfolio.build.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nvar tinyEmitter = E;\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nvar matchesSelector = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n\nvar throttleit = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n\nvar arrayParallel = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n\n  var finished = false;\n  var results = new Array(pending);\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return\n      }\n\n      results[i] = result;\n\n      if (!--pending) callback(null, results);\n    }\n  }\n};\n\nfunction noop() {}\n\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Point = function () {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  function Point(x, y) {\n    classCallCheck(this, Point);\n\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n\n  createClass(Point, null, [{\n    key: 'equals',\n    value: function equals(a, b) {\n      return a.x === b.x && a.y === b.y;\n    }\n  }]);\n  return Point;\n}();\n\nvar Rect = function () {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  function Rect(x, y, w, h, id) {\n    classCallCheck(this, Rect);\n\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n\n\n  createClass(Rect, null, [{\n    key: \"intersects\",\n    value: function intersects(a, b) {\n      return a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height;\n    }\n  }]);\n  return Rect;\n}();\n\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\n\nvar id = 0;\n\nvar ShuffleItem = function () {\n  function ShuffleItem(element) {\n    classCallCheck(this, ShuffleItem);\n\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  createClass(ShuffleItem, [{\n    key: 'show',\n    value: function show() {\n      this.isVisible = true;\n      this.element.classList.remove(Classes.HIDDEN);\n      this.element.classList.add(Classes.VISIBLE);\n      this.element.removeAttribute('aria-hidden');\n    }\n  }, {\n    key: 'hide',\n    value: function hide() {\n      this.isVisible = false;\n      this.element.classList.remove(Classes.VISIBLE);\n      this.element.classList.add(Classes.HIDDEN);\n      this.element.setAttribute('aria-hidden', true);\n    }\n  }, {\n    key: 'init',\n    value: function init() {\n      this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n      this.applyCss(ShuffleItem.Css.INITIAL);\n      this.scale = ShuffleItem.Scale.VISIBLE;\n      this.point = new Point();\n    }\n  }, {\n    key: 'addClasses',\n    value: function addClasses(classes) {\n      var _this = this;\n\n      classes.forEach(function (className) {\n        _this.element.classList.add(className);\n      });\n    }\n  }, {\n    key: 'removeClasses',\n    value: function removeClasses(classes) {\n      var _this2 = this;\n\n      classes.forEach(function (className) {\n        _this2.element.classList.remove(className);\n      });\n    }\n  }, {\n    key: 'applyCss',\n    value: function applyCss(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3.element.style[key] = obj[key];\n      });\n    }\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n\n      this.element.removeAttribute('style');\n      this.element = null;\n    }\n  }]);\n  return ShuffleItem;\n}();\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    visibility: 'visible',\n    'will-change': 'transform'\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {\n      transitionDelay: ''\n    }\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: ''\n    }\n  }\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\n\nvar element = document.body || document.documentElement;\nvar e = document.createElement('div');\ne.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\nelement.appendChild(e);\n\nvar _window$getComputedSt = window.getComputedStyle(e, null),\n    width = _window$getComputedSt.width;\n\nvar ret = width === '10px';\n\nelement.removeChild(e);\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nfunction getNumberStyle(element, style) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n\n  var value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!ret && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!ret && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  var n = array.length;\n\n  while (n) {\n    n -= 1;\n    var i = Math.floor(Math.random() * (n + 1));\n    var temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nvar defaults$1 = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n};\n\n// You can return `undefined` from the `by` function to revert to DOM order.\nfunction sorter(arr, options) {\n  var opts = Object.assign({}, defaults$1, options);\n  var original = Array.from(arr);\n  var revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      var valA = opts.by(a[opts.key]);\n      var valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n\nvar transitions = {};\nvar eventName = 'transitionend';\nvar count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nfunction onTransitionEnd(element, callback) {\n  var id = uniqueId();\n  var listener = function listener(evt) {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element: element, listener: listener };\n\n  return id;\n}\n\nfunction arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\nfunction arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  var available = [];\n\n  // For how many possible positions for this item there are.\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nfunction getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nfunction getItemPosition(_ref) {\n  var itemSize = _ref.itemSize,\n      positions = _ref.positions,\n      gridSize = _ref.gridSize,\n      total = _ref.total,\n      threshold = _ref.threshold,\n      buffer = _ref.buffer;\n\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  var point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nfunction getCenteredPositions(itemRects, containerWidth) {\n  var rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach(function (itemRect) {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  var rects = [];\n  var rows = [];\n  var centeredRows = [];\n  Object.keys(rowMap).forEach(function (key) {\n    var itemRects = rowMap[key];\n    rows.push(itemRects);\n    var lastItem = itemRects[itemRects.length - 1];\n    var end = lastItem.left + lastItem.width;\n    var offset = Math.round((containerWidth - end) / 2);\n\n    var finalRects = itemRects;\n    var canMove = false;\n    if (offset > 0) {\n      var newRects = [];\n      canMove = itemRects.every(function (r) {\n        var newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        var noOverlap = !rects.some(function (r) {\n          return Rect.intersects(newRect, r);\n        });\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      var intersectingRect = void 0;\n      var hasOverlap = itemRects.some(function (itemRect) {\n        return rects.some(function (r) {\n          var intersects = Rect.intersects(itemRect, r);\n          if (intersects) {\n            intersectingRect = r;\n          }\n          return intersects;\n        });\n      });\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        var rowIndex = centeredRows.findIndex(function (items) {\n          return items.includes(intersectingRect);\n        });\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n  .sort(function (a, b) {\n    return a.id - b.id;\n  }).map(function (itemRect) {\n    return new Point(itemRect.left, itemRect.top);\n  });\n}\n\n/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nfunction hyphenate(str) {\n  return str.replace(/([A-Z])/g, function (str, m1) {\n    return \"-\" + m1.toLowerCase();\n  });\n}\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nvar id$1 = 0;\n\nvar Shuffle = function (_TinyEmitter) {\n  inherits(Shuffle, _TinyEmitter);\n\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  function Shuffle(element) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Shuffle);\n\n    var _this = possibleConstructorReturn(this, (Shuffle.__proto__ || Object.getPrototypeOf(Shuffle)).call(this));\n\n    _this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (_this.options.delimeter) {\n      _this.options.delimiter = _this.options.delimeter;\n    }\n\n    _this.lastSort = {};\n    _this.group = Shuffle.ALL_ITEMS;\n    _this.lastFilter = Shuffle.ALL_ITEMS;\n    _this.isEnabled = true;\n    _this.isDestroyed = false;\n    _this.isInitialized = false;\n    _this._transitions = [];\n    _this.isTransitioning = false;\n    _this._queue = [];\n\n    var el = _this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    _this.element = el;\n    _this.id = 'shuffle_' + id$1;\n    id$1 += 1;\n\n    _this._init();\n    _this.isInitialized = true;\n    return _this;\n  }\n\n  createClass(Shuffle, [{\n    key: '_init',\n    value: function _init() {\n      this.items = this._getItems();\n\n      this.options.sizer = this._getElementOption(this.options.sizer);\n\n      // Add class and invalidate styles\n      this.element.classList.add(Shuffle.Classes.BASE);\n\n      // Set initial css for each item\n      this._initItems(this.items);\n\n      // Bind resize events\n      this._onResize = this._getResizeFunction();\n      window.addEventListener('resize', this._onResize);\n\n      // If the page has not already emitted the `load` event, call layout on load.\n      // This avoids layout issues caused by images and fonts loading after the\n      // instance has been initialized.\n      if (document.readyState !== 'complete') {\n        var layout = this.layout.bind(this);\n        window.addEventListener('load', function onLoad() {\n          window.removeEventListener('load', onLoad);\n          layout();\n        });\n      }\n\n      // Get container css all in one request. Causes reflow\n      var containerCss = window.getComputedStyle(this.element, null);\n      var containerWidth = Shuffle.getSize(this.element).width;\n\n      // Add styles to the container if it doesn't have them.\n      this._validateStyles(containerCss);\n\n      // We already got the container's width above, no need to cause another\n      // reflow getting it again... Calculate the number of columns there will be\n      this._setColumns(containerWidth);\n\n      // Kick off!\n      this.filter(this.options.group, this.options.initialSort);\n\n      // The shuffle items haven't had transitions set on them yet so the user\n      // doesn't see the first layout. Set them now that the first layout is done.\n      // First, however, a synchronous layout must be caused for the previous\n      // styles to be applied without transitions.\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n      this.setItemTransitions(this.items);\n      this.element.style.transition = 'height ' + this.options.speed + 'ms ' + this.options.easing;\n    }\n\n    /**\n     * Returns a throttled and proxied function for the resize handler.\n     * @return {function}\n     * @private\n     */\n\n  }, {\n    key: '_getResizeFunction',\n    value: function _getResizeFunction() {\n      var resizeFunction = this._handleResize.bind(this);\n      return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n    }\n\n    /**\n     * Retrieve an element from an option.\n     * @param {string|jQuery|Element} option The option to check.\n     * @return {?Element} The plain element or null.\n     * @private\n     */\n\n  }, {\n    key: '_getElementOption',\n    value: function _getElementOption(option) {\n      // If column width is a string, treat is as a selector and search for the\n      // sizer element within the outermost container\n      if (typeof option === 'string') {\n        return this.element.querySelector(option);\n\n        // Check for an element\n      } else if (option && option.nodeType && option.nodeType === 1) {\n        return option;\n\n        // Check for jQuery object\n      } else if (option && option.jquery) {\n        return option[0];\n      }\n\n      return null;\n    }\n\n    /**\n     * Ensures the shuffle container has the css styles it needs applied to it.\n     * @param {Object} styles Key value pairs for position and overflow.\n     * @private\n     */\n\n  }, {\n    key: '_validateStyles',\n    value: function _validateStyles(styles) {\n      // Position cannot be static.\n      if (styles.position === 'static') {\n        this.element.style.position = 'relative';\n      }\n\n      // Overflow has to be hidden.\n      if (styles.overflow !== 'hidden') {\n        this.element.style.overflow = 'hidden';\n      }\n    }\n\n    /**\n     * Filter the elements by a category.\n     * @param {string|string[]|function(Element):boolean} [category] Category to\n     *     filter by. If it's given, the last category will be used to filter the items.\n     * @param {Array} [collection] Optionally filter a collection. Defaults to\n     *     all the items.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n\n  }, {\n    key: '_filter',\n    value: function _filter() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n\n      var set$$1 = this._getFilteredSets(category, collection);\n\n      // Individually add/remove hidden/visible classes\n      this._toggleFilterClasses(set$$1);\n\n      // Save the last filter in case elements are appended.\n      this.lastFilter = category;\n\n      // This is saved mainly because providing a filter function (like searching)\n      // will overwrite the `lastFilter` property every time its called.\n      if (typeof category === 'string') {\n        this.group = category;\n      }\n\n      return set$$1;\n    }\n\n    /**\n     * Returns an object containing the visible and hidden elements.\n     * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n     * @param {ShuffleItem[]} items A collection of items to filter.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n\n  }, {\n    key: '_getFilteredSets',\n    value: function _getFilteredSets(category, items) {\n      var _this2 = this;\n\n      var visible = [];\n      var hidden = [];\n\n      // category === 'all', add visible class to everything\n      if (category === Shuffle.ALL_ITEMS) {\n        visible = items;\n\n        // Loop through each item and use provided function to determine\n        // whether to hide it or not.\n      } else {\n        items.forEach(function (item) {\n          if (_this2._doesPassFilter(category, item.element)) {\n            visible.push(item);\n          } else {\n            hidden.push(item);\n          }\n        });\n      }\n\n      return {\n        visible: visible,\n        hidden: hidden\n      };\n    }\n\n    /**\n     * Test an item to see if it passes a category.\n     * @param {string|string[]|function():boolean} category Category or function to filter by.\n     * @param {Element} element An element to test.\n     * @return {boolean} Whether it passes the category/filter.\n     * @private\n     */\n\n  }, {\n    key: '_doesPassFilter',\n    value: function _doesPassFilter(category, element) {\n      if (typeof category === 'function') {\n        return category.call(element, element, this);\n      }\n\n      // Check each element's data-groups attribute against the given category.\n      var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      var keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n\n      function testCategory(category) {\n        return keys.includes(category);\n      }\n\n      if (Array.isArray(category)) {\n        if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n          return category.some(testCategory);\n        }\n        return category.every(testCategory);\n      }\n\n      return keys.includes(category);\n    }\n\n    /**\n     * Toggles the visible and hidden class names.\n     * @param {{visible, hidden}} Object with visible and hidden arrays.\n     * @private\n     */\n\n  }, {\n    key: '_toggleFilterClasses',\n    value: function _toggleFilterClasses(_ref) {\n      var visible = _ref.visible,\n          hidden = _ref.hidden;\n\n      visible.forEach(function (item) {\n        item.show();\n      });\n\n      hidden.forEach(function (item) {\n        item.hide();\n      });\n    }\n\n    /**\n     * Set the initial css for each item\n     * @param {ShuffleItem[]} items Set to initialize.\n     * @private\n     */\n\n  }, {\n    key: '_initItems',\n    value: function _initItems(items) {\n      items.forEach(function (item) {\n        item.init();\n      });\n    }\n\n    /**\n     * Remove element reference and styles.\n     * @param {ShuffleItem[]} items Set to dispose.\n     * @private\n     */\n\n  }, {\n    key: '_disposeItems',\n    value: function _disposeItems(items) {\n      items.forEach(function (item) {\n        item.dispose();\n      });\n    }\n\n    /**\n     * Updates the visible item count.\n     * @private\n     */\n\n  }, {\n    key: '_updateItemCount',\n    value: function _updateItemCount() {\n      this.visibleItems = this._getFilteredItems().length;\n    }\n\n    /**\n     * Sets css transform transition on a group of elements. This is not executed\n     * at the same time as `item.init` so that transitions don't occur upon\n     * initialization of a new Shuffle instance.\n     * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n     * @protected\n     */\n\n  }, {\n    key: 'setItemTransitions',\n    value: function setItemTransitions(items) {\n      var _options = this.options,\n          speed = _options.speed,\n          easing = _options.easing;\n\n      var positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n      // Allow users to transtion other properties if they exist in the `before`\n      // css mapping of the shuffle item.\n      var cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(function (k) {\n        return hyphenate(k);\n      });\n      var properties = positionProps.concat(cssProps).join();\n\n      items.forEach(function (item) {\n        item.element.style.transitionDuration = speed + 'ms';\n        item.element.style.transitionTimingFunction = easing;\n        item.element.style.transitionProperty = properties;\n      });\n    }\n  }, {\n    key: '_getItems',\n    value: function _getItems() {\n      var _this3 = this;\n\n      return Array.from(this.element.children).filter(function (el) {\n        return matchesSelector(el, _this3.options.itemSelector);\n      }).map(function (el) {\n        return new ShuffleItem(el);\n      });\n    }\n\n    /**\n     * Combine the current items array with a new one and sort it by DOM order.\n     * @param {ShuffleItem[]} items Items to track.\n     * @return {ShuffleItem[]}\n     */\n\n  }, {\n    key: '_mergeNewItems',\n    value: function _mergeNewItems(items) {\n      var children = Array.from(this.element.children);\n      return sorter(this.items.concat(items), {\n        by: function by(element) {\n          return children.indexOf(element);\n        }\n      });\n    }\n  }, {\n    key: '_getFilteredItems',\n    value: function _getFilteredItems() {\n      return this.items.filter(function (item) {\n        return item.isVisible;\n      });\n    }\n  }, {\n    key: '_getConcealedItems',\n    value: function _getConcealedItems() {\n      return this.items.filter(function (item) {\n        return !item.isVisible;\n      });\n    }\n\n    /**\n     * Returns the column size, based on column width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @param {number} gutterSize Size of the gutters.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getColumnSize',\n    value: function _getColumnSize(containerWidth, gutterSize) {\n      var size = void 0;\n\n      // If the columnWidth property is a function, then the grid is fluid\n      if (typeof this.options.columnWidth === 'function') {\n        size = this.options.columnWidth(containerWidth);\n\n        // columnWidth option isn't a function, are they using a sizing element?\n      } else if (this.options.sizer) {\n        size = Shuffle.getSize(this.options.sizer).width;\n\n        // if not, how about the explicitly set option?\n      } else if (this.options.columnWidth) {\n        size = this.options.columnWidth;\n\n        // or use the size of the first item\n      } else if (this.items.length > 0) {\n        size = Shuffle.getSize(this.items[0].element, true).width;\n\n        // if there's no items, use size of container\n      } else {\n        size = containerWidth;\n      }\n\n      // Don't let them set a column width of zero.\n      if (size === 0) {\n        size = containerWidth;\n      }\n\n      return size + gutterSize;\n    }\n\n    /**\n     * Returns the gutter size, based on gutter width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getGutterSize',\n    value: function _getGutterSize(containerWidth) {\n      var size = void 0;\n      if (typeof this.options.gutterWidth === 'function') {\n        size = this.options.gutterWidth(containerWidth);\n      } else if (this.options.sizer) {\n        size = getNumberStyle(this.options.sizer, 'marginLeft');\n      } else {\n        size = this.options.gutterWidth;\n      }\n\n      return size;\n    }\n\n    /**\n     * Calculate the number of columns to be used. Gets css if using sizer element.\n     * @param {number} [containerWidth] Optionally specify a container width if\n     *    it's already available.\n     */\n\n  }, {\n    key: '_setColumns',\n    value: function _setColumns() {\n      var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n\n      var gutter = this._getGutterSize(containerWidth);\n      var columnWidth = this._getColumnSize(containerWidth, gutter);\n      var calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n      // Widths given from getStyles are not precise enough...\n      if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n        // e.g. calculatedColumns = 11.998876\n        calculatedColumns = Math.round(calculatedColumns);\n      }\n\n      this.cols = Math.max(Math.floor(calculatedColumns), 1);\n      this.containerWidth = containerWidth;\n      this.colWidth = columnWidth;\n    }\n\n    /**\n     * Adjust the height of the grid\n     */\n\n  }, {\n    key: '_setContainerSize',\n    value: function _setContainerSize() {\n      this.element.style.height = this._getContainerSize() + 'px';\n    }\n\n    /**\n     * Based on the column heights, it returns the biggest one.\n     * @return {number}\n     * @private\n     */\n\n  }, {\n    key: '_getContainerSize',\n    value: function _getContainerSize() {\n      return arrayMax(this.positions);\n    }\n\n    /**\n     * Get the clamped stagger amount.\n     * @param {number} index Index of the item to be staggered.\n     * @return {number}\n     */\n\n  }, {\n    key: '_getStaggerAmount',\n    value: function _getStaggerAmount(index) {\n      return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n    }\n\n    /**\n     * Emit an event from this instance.\n     * @param {string} name Event name.\n     * @param {Object} [data={}] Optional object data.\n     */\n\n  }, {\n    key: '_dispatch',\n    value: function _dispatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.isDestroyed) {\n        return;\n      }\n\n      data.shuffle = this;\n      this.emit(name, data);\n    }\n\n    /**\n     * Zeros out the y columns array, which is used to determine item placement.\n     * @private\n     */\n\n  }, {\n    key: '_resetCols',\n    value: function _resetCols() {\n      var i = this.cols;\n      this.positions = [];\n      while (i) {\n        i -= 1;\n        this.positions.push(0);\n      }\n    }\n\n    /**\n     * Loops through each item that should be shown and calculates the x, y position.\n     * @param {ShuffleItem[]} items Array of items that will be shown/layed\n     *     out in order in their array.\n     */\n\n  }, {\n    key: '_layout',\n    value: function _layout(items) {\n      var _this4 = this;\n\n      var itemPositions = this._getNextPositions(items);\n\n      var count = 0;\n      items.forEach(function (item, i) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.VISIBLE.after);\n        }\n\n        // If the item will not change its position, do not add it to the render\n        // queue. Transitions don't fire when setting a property to the same value.\n        if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n          item.applyCss(ShuffleItem.Css.VISIBLE.before);\n          callback();\n          return;\n        }\n\n        item.point = itemPositions[i];\n        item.scale = ShuffleItem.Scale.VISIBLE;\n        item.isHidden = false;\n\n        // Clone the object so that the `before` object isn't modified when the\n        // transition delay is added.\n        var styles = _this4.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n        styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n\n        _this4._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n\n    /**\n     * Return an array of Point instances representing the future positions of\n     * each item.\n     * @param {ShuffleItem[]} items Array of sorted shuffle items.\n     * @return {Point[]}\n     * @private\n     */\n\n  }, {\n    key: '_getNextPositions',\n    value: function _getNextPositions(items) {\n      var _this5 = this;\n\n      // If position data is going to be changed, add the item's size to the\n      // transformer to allow for calculations.\n      if (this.options.isCentered) {\n        var itemsData = items.map(function (item, i) {\n          var itemSize = Shuffle.getSize(item.element, true);\n          var point = _this5._getItemPosition(itemSize);\n          return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n        });\n\n        return this.getTransformedPositions(itemsData, this.containerWidth);\n      }\n\n      // If no transforms are going to happen, simply return an array of the\n      // future points of each item.\n      return items.map(function (item) {\n        return _this5._getItemPosition(Shuffle.getSize(item.element, true));\n      });\n    }\n\n    /**\n     * Determine the location of the next item, based on its size.\n     * @param {{width: number, height: number}} itemSize Object with width and height.\n     * @return {Point}\n     * @private\n     */\n\n  }, {\n    key: '_getItemPosition',\n    value: function _getItemPosition(itemSize) {\n      return getItemPosition({\n        itemSize: itemSize,\n        positions: this.positions,\n        gridSize: this.colWidth,\n        total: this.cols,\n        threshold: this.options.columnThreshold,\n        buffer: this.options.buffer\n      });\n    }\n\n    /**\n     * Mutate positions before they're applied.\n     * @param {Rect[]} itemRects Item data objects.\n     * @param {number} containerWidth Width of the containing element.\n     * @return {Point[]}\n     * @protected\n     */\n\n  }, {\n    key: 'getTransformedPositions',\n    value: function getTransformedPositions(itemRects, containerWidth) {\n      return getCenteredPositions(itemRects, containerWidth);\n    }\n\n    /**\n     * Hides the elements that don't match our filter.\n     * @param {ShuffleItem[]} collection Collection to shrink.\n     * @private\n     */\n\n  }, {\n    key: '_shrink',\n    value: function _shrink() {\n      var _this6 = this;\n\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n\n      var count = 0;\n      collection.forEach(function (item) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        }\n\n        // Continuing would add a transitionend event listener to the element, but\n        // that listener would not execute because the transform and opacity would\n        // stay the same.\n        // The callback is executed here because it is not guaranteed to be called\n        // after the transitionend event because the transitionend could be\n        // canceled if another animation starts.\n        if (item.isHidden) {\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          callback();\n          return;\n        }\n\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n\n        var styles = _this6.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n        styles.transitionDelay = _this6._getStaggerAmount(count) + 'ms';\n\n        _this6._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n\n        count += 1;\n      });\n    }\n\n    /**\n     * Resize handler.\n     * @private\n     */\n\n  }, {\n    key: '_handleResize',\n    value: function _handleResize() {\n      // If shuffle is disabled, destroyed, don't do anything\n      if (!this.isEnabled || this.isDestroyed) {\n        return;\n      }\n\n      this.update();\n    }\n\n    /**\n     * Returns styles which will be applied to the an item for a transition.\n     * @param {ShuffleItem} item Item to get styles for. Should have updated\n     *   scale and point properties.\n     * @param {Object} styleObject Extra styles that will be used in the transition.\n     * @return {!Object} Transforms for transitions, left/top for animate.\n     * @protected\n     */\n\n  }, {\n    key: 'getStylesForTransition',\n    value: function getStylesForTransition(item, styleObject) {\n      // Clone the object to avoid mutating the original.\n      var styles = Object.assign({}, styleObject);\n\n      if (this.options.useTransforms) {\n        var x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n        var y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n        styles.transform = 'translate(' + x + 'px, ' + y + 'px) scale(' + item.scale + ')';\n      } else {\n        styles.left = item.point.x + 'px';\n        styles.top = item.point.y + 'px';\n      }\n\n      return styles;\n    }\n\n    /**\n     * Listen for the transition end on an element and execute the itemCallback\n     * when it finishes.\n     * @param {Element} element Element to listen on.\n     * @param {function} itemCallback Callback for the item.\n     * @param {function} done Callback to notify `parallel` that this one is done.\n     */\n\n  }, {\n    key: '_whenTransitionDone',\n    value: function _whenTransitionDone(element, itemCallback, done) {\n      var id = onTransitionEnd(element, function (evt) {\n        itemCallback();\n        done(null, evt);\n      });\n\n      this._transitions.push(id);\n    }\n\n    /**\n     * Return a function which will set CSS styles and call the `done` function\n     * when (if) the transition finishes.\n     * @param {Object} opts Transition object.\n     * @return {function} A function to be called with a `done` function.\n     */\n\n  }, {\n    key: '_getTransitionFunction',\n    value: function _getTransitionFunction(opts) {\n      var _this7 = this;\n\n      return function (done) {\n        opts.item.applyCss(opts.styles);\n        _this7._whenTransitionDone(opts.item.element, opts.callback, done);\n      };\n    }\n\n    /**\n     * Execute the styles gathered in the style queue. This applies styles to elements,\n     * triggering transitions.\n     * @private\n     */\n\n  }, {\n    key: '_processQueue',\n    value: function _processQueue() {\n      if (this.isTransitioning) {\n        this._cancelMovement();\n      }\n\n      var hasSpeed = this.options.speed > 0;\n      var hasQueue = this._queue.length > 0;\n\n      if (hasQueue && hasSpeed && this.isInitialized) {\n        this._startTransitions(this._queue);\n      } else if (hasQueue) {\n        this._styleImmediately(this._queue);\n        this._dispatch(Shuffle.EventType.LAYOUT);\n\n        // A call to layout happened, but none of the newly visible items will\n        // change position or the transition duration is zero, which will not trigger\n        // the transitionend event.\n      } else {\n        this._dispatch(Shuffle.EventType.LAYOUT);\n      }\n\n      // Remove everything in the style queue\n      this._queue.length = 0;\n    }\n\n    /**\n     * Wait for each transition to finish, the emit the layout event.\n     * @param {Object[]} transitions Array of transition objects.\n     */\n\n  }, {\n    key: '_startTransitions',\n    value: function _startTransitions(transitions) {\n      var _this8 = this;\n\n      // Set flag that shuffle is currently in motion.\n      this.isTransitioning = true;\n\n      // Create an array of functions to be called.\n      var callbacks = transitions.map(function (obj) {\n        return _this8._getTransitionFunction(obj);\n      });\n\n      arrayParallel(callbacks, this._movementFinished.bind(this));\n    }\n  }, {\n    key: '_cancelMovement',\n    value: function _cancelMovement() {\n      // Remove the transition end event for each listener.\n      this._transitions.forEach(cancelTransitionEnd);\n\n      // Reset the array.\n      this._transitions.length = 0;\n\n      // Show it's no longer active.\n      this.isTransitioning = false;\n    }\n\n    /**\n     * Apply styles without a transition.\n     * @param {Object[]} objects Array of transition objects.\n     * @private\n     */\n\n  }, {\n    key: '_styleImmediately',\n    value: function _styleImmediately(objects) {\n      if (objects.length) {\n        var elements = objects.map(function (obj) {\n          return obj.item.element;\n        });\n\n        Shuffle._skipTransitions(elements, function () {\n          objects.forEach(function (obj) {\n            obj.item.applyCss(obj.styles);\n            obj.callback();\n          });\n        });\n      }\n    }\n  }, {\n    key: '_movementFinished',\n    value: function _movementFinished() {\n      this._transitions.length = 0;\n      this.isTransitioning = false;\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    /**\n     * The magic. This is what makes the plugin 'shuffle'\n     * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n     *     Can be a function, string, or array of strings.\n     * @param {Object} [sortObj] A sort object which can sort the visible set\n     */\n\n  }, {\n    key: 'filter',\n    value: function filter(category, sortObj) {\n      if (!this.isEnabled) {\n        return;\n      }\n\n      if (!category || category && category.length === 0) {\n        category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n      }\n\n      this._filter(category);\n\n      // Shrink each hidden item\n      this._shrink();\n\n      // How many visible elements?\n      this._updateItemCount();\n\n      // Update transforms on visible elements so they will animate to their new positions.\n      this.sort(sortObj);\n    }\n\n    /**\n     * Gets the visible elements, sorts them, and passes them to layout.\n     * @param {Object} [sortOptions] The options object to pass to `sorter`.\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort() {\n      var sortOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n\n      if (!this.isEnabled) {\n        return;\n      }\n\n      this._resetCols();\n\n      var items = sorter(this._getFilteredItems(), sortOptions);\n\n      this._layout(items);\n\n      // `_layout` always happens after `_shrink`, so it's safe to process the style\n      // queue here with styles from the shrink method.\n      this._processQueue();\n\n      // Adjust the height of the container.\n      this._setContainerSize();\n\n      this.lastSort = sortOptions;\n    }\n\n    /**\n     * Reposition everything.\n     * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      var isOnlyLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.isEnabled) {\n        if (!isOnlyLayout) {\n          // Get updated colCount\n          this._setColumns();\n        }\n\n        // Layout items\n        this.sort();\n      }\n    }\n\n    /**\n     * Use this instead of `update()` if you don't need the columns and gutters updated\n     * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n     * could be off.\n     */\n\n  }, {\n    key: 'layout',\n    value: function layout() {\n      this.update(true);\n    }\n\n    /**\n     * New items have been appended to shuffle. Mix them in with the current\n     * filter or sort status.\n     * @param {Element[]} newItems Collection of new items.\n     */\n\n  }, {\n    key: 'add',\n    value: function add(newItems) {\n      var _this9 = this;\n\n      var items = arrayUnique(newItems).map(function (el) {\n        return new ShuffleItem(el);\n      });\n\n      // Add classes and set initial positions.\n      this._initItems(items);\n\n      // Determine which items will go with the current filter.\n      this._resetCols();\n\n      var allItems = this._mergeNewItems(items);\n      var sortedItems = sorter(allItems, this.lastSort);\n      var allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n      var isNewItem = function isNewItem(item) {\n        return items.includes(item);\n      };\n      var applyHiddenState = function applyHiddenState(item) {\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      };\n\n      // Layout all items again so that new items get positions.\n      // Synchonously apply positions.\n      var itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n      allSortedItemsSet.visible.forEach(function (item, i) {\n        if (isNewItem(item)) {\n          item.point = itemPositions[i];\n          applyHiddenState(item);\n          item.applyCss(_this9.getStylesForTransition(item, {}));\n        }\n      });\n\n      allSortedItemsSet.hidden.forEach(function (item) {\n        if (isNewItem(item)) {\n          applyHiddenState(item);\n        }\n      });\n\n      // Cause layout so that the styles above are applied.\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n      // Add transition to each item.\n      this.setItemTransitions(items);\n\n      // Update the list of items.\n      this.items = this._mergeNewItems(items);\n\n      // Update layout/visibility of new and old items.\n      this.filter(this.lastFilter);\n    }\n\n    /**\n     * Disables shuffle from updating dimensions and layout on resize\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.isEnabled = false;\n    }\n\n    /**\n     * Enables shuffle again\n     * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable() {\n      var isUpdateLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      this.isEnabled = true;\n      if (isUpdateLayout) {\n        this.update();\n      }\n    }\n\n    /**\n     * Remove 1 or more shuffle items.\n     * @param {Element[]} elements An array containing one or more\n     *     elements in shuffle\n     * @return {Shuffle} The shuffle instance.\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(elements) {\n      var _this10 = this;\n\n      if (!elements.length) {\n        return;\n      }\n\n      var collection = arrayUnique(elements);\n\n      var oldItems = collection.map(function (element) {\n        return _this10.getItemByElement(element);\n      }).filter(function (item) {\n        return !!item;\n      });\n\n      var handleLayout = function handleLayout() {\n        _this10._disposeItems(oldItems);\n\n        // Remove the collection in the callback\n        collection.forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n\n        _this10._dispatch(Shuffle.EventType.REMOVED, { collection: collection });\n      };\n\n      // Hide collection first.\n      this._toggleFilterClasses({\n        visible: [],\n        hidden: oldItems\n      });\n\n      this._shrink(oldItems);\n\n      this.sort();\n\n      // Update the list of items here because `remove` could be called again\n      // with an item that is in the process of being removed.\n      this.items = this.items.filter(function (item) {\n        return !oldItems.includes(item);\n      });\n      this._updateItemCount();\n\n      this.once(Shuffle.EventType.LAYOUT, handleLayout);\n    }\n\n    /**\n     * Retrieve a shuffle item by its element.\n     * @param {Element} element Element to look for.\n     * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n     */\n\n  }, {\n    key: 'getItemByElement',\n    value: function getItemByElement(element) {\n      return this.items.find(function (item) {\n        return item.element === element;\n      });\n    }\n\n    /**\n     * Dump the elements currently stored and reinitialize all child elements which\n     * match the `itemSelector`.\n     */\n\n  }, {\n    key: 'resetItems',\n    value: function resetItems() {\n      var _this11 = this;\n\n      // Remove refs to current items.\n      this._disposeItems(this.items);\n      this.isInitialized = false;\n\n      // Find new items in the DOM.\n      this.items = this._getItems();\n\n      // Set initial styles on the new items.\n      this._initItems(this.items);\n\n      this.once(Shuffle.EventType.LAYOUT, function () {\n        // Add transition to each item.\n        _this11.setItemTransitions(_this11.items);\n        _this11.isInitialized = true;\n      });\n\n      // Lay out all items.\n      this.filter(this.lastFilter);\n    }\n\n    /**\n     * Destroys shuffle, removes events, styles, and classes\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._cancelMovement();\n      window.removeEventListener('resize', this._onResize);\n\n      // Reset container styles\n      this.element.classList.remove('shuffle');\n      this.element.removeAttribute('style');\n\n      // Reset individual item styles\n      this._disposeItems(this.items);\n\n      this.items.length = 0;\n      this._transitions.length = 0;\n\n      // Null DOM references\n      this.options.sizer = null;\n      this.element = null;\n\n      // Set a flag so if a debounced resize has been triggered,\n      // it can first check if it is actually isDestroyed and not doing anything\n      this.isDestroyed = true;\n      this.isEnabled = false;\n    }\n\n    /**\n     * Returns the outer width of an element, optionally including its margins.\n     *\n     * There are a few different methods for getting the width of an element, none of\n     * which work perfectly for all Shuffle's use cases.\n     *\n     * 1. getBoundingClientRect() `left` and `right` properties.\n     *   - Accounts for transform scaled elements, making it useless for Shuffle\n     *   elements which have shrunk.\n     * 2. The `offsetWidth` property.\n     *   - This value stays the same regardless of the elements transform property,\n     *   however, it does not return subpixel values.\n     * 3. getComputedStyle()\n     *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n     *   padding and border when box-sizing: border-box is set, requiring a feature\n     *   test and extra work to add the padding back for IE and other browsers which\n     *   follow the W3C spec here.\n     *\n     * @param {Element} element The element.\n     * @param {boolean} [includeMargins=false] Whether to include margins.\n     * @return {{width: number, height: number}} The width and height.\n     */\n\n  }], [{\n    key: 'getSize',\n    value: function getSize(element) {\n      var includeMargins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // Store the styles so that they can be used by others without asking for it again.\n      var styles = window.getComputedStyle(element, null);\n      var width = getNumberStyle(element, 'width', styles);\n      var height = getNumberStyle(element, 'height', styles);\n\n      if (includeMargins) {\n        var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n        var marginRight = getNumberStyle(element, 'marginRight', styles);\n        var marginTop = getNumberStyle(element, 'marginTop', styles);\n        var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n        width += marginLeft + marginRight;\n        height += marginTop + marginBottom;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n\n    /**\n     * Change a property or execute a function which will not have a transition\n     * @param {Element[]} elements DOM elements that won't be transitioned.\n     * @param {function} callback A function which will be called while transition\n     *     is set to 0ms.\n     * @private\n     */\n\n  }, {\n    key: '_skipTransitions',\n    value: function _skipTransitions(elements, callback) {\n      var zero = '0ms';\n\n      // Save current duration and delay.\n      var data = elements.map(function (element) {\n        var style = element.style;\n\n        var duration = style.transitionDuration;\n        var delay = style.transitionDelay;\n\n        // Set the duration to zero so it happens immediately\n        style.transitionDuration = zero;\n        style.transitionDelay = zero;\n\n        return {\n          duration: duration,\n          delay: delay\n        };\n      });\n\n      callback();\n\n      // Cause forced synchronous layout.\n      elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n      // Put the duration back\n      elements.forEach(function (element, i) {\n        element.style.transitionDuration = data[i].duration;\n        element.style.transitionDelay = data[i].delay;\n      });\n    }\n  }]);\n  return Shuffle;\n}(tinyEmitter);\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: throttleit,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n//# sourceMappingURL=shuffle.esm.js.map\n","import Shuffle from 'shufflejs';\n\n\nvar InitShuffle = function (element) {\n\tthis.groups = Array.from(document.querySelectorAll('.filter-options button'));\n\n\tthis.shuffle = new Shuffle(element, {\n\t\teasing: 'initial', // easeOutQuart\n\t\tsizer: null,\n\t});\n\n\tthis.filters = {\n\t\tgroups: [],\n\t};\n\n\tthis._bindEventListeners();\n};\n\n/**\n * Bind event listeners for when the filters change.\n */\nInitShuffle.prototype._bindEventListeners = function () {\n\tthis._onGroupChange = this._handleGroupChange.bind(this);\n\n\tthis.groups.forEach(function (button) {\n\t\tbutton.addEventListener('click', this._onGroupChange);\n\t}, this);\n};\n\n/**\n * Get the values of each `active` button.\n * @return {Array.<string>}\n */\nInitShuffle.prototype._getCurrentGroupFilters = function () {\n\treturn this.groups.filter(function (button) {\n\t\treturn button.classList.contains('active');\n\t}).map(function (button) {\n\t\treturn button.getAttribute('data-group');\n\t});\n};\n\n/**\n * A group button was clicked. Update filters and display.\n * @param {Event} evt Click event object.\n */\nInitShuffle.prototype._handleGroupChange = function (evt) {\n\tvar btn = evt.currentTarget,\n\t\tisActive = btn.classList.contains('active'),\n\t\tbtnGroup = btn.getAttribute('data-group'),\n\t\tfilterGroup;\n\n\tthis._removeActiveClassFromChildren(btn.parentNode);\n\n\tif (isActive) {\n\t\tbtn.classList.remove('active');\n\t\tfilterGroup = Shuffle.ALL_ITEMS;\n\t} else {\n\t\tbtn.classList.add('active');\n\t\tfilterGroup = btnGroup;\n\t}\n\n\tthis.shuffle.filter(filterGroup);\n};\n\nInitShuffle.prototype._removeActiveClassFromChildren = function (parent) {\n\tvar children = parent.children;\n\tfor (var i = children.length - 1; i >= 0; i--) {\n\t\tchildren[i].classList.remove('active');\n\t}\n};\n\n/**\n * If any of the arrays in the `filters` property have a length of more than zero,\n * that means there is an active filter.\n * @return {boolean}\n */\nInitShuffle.prototype.hasActiveFilters = function () {\n\treturn Object.keys(this.filters).some(function (key) {\n\t\treturn this.filters[key].length > 0;\n\t}, this);\n};\n\n/**\n * Determine whether an element passes the current filters.\n * @param {Element} element Element to test.\n * @return {boolean} Whether it satisfies all current filters.\n */\nInitShuffle.prototype.itemPassesFilters = function (element) {\n\tvar groups = this.filters.groups, group = element.getAttribute('data-group');\n\n\t// If there are active group filters and this group is not in that array.\n\tif (groups.length > 0 && !groups.includes(group)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\twindow.demo = new InitShuffle(document.getElementById('portfolio-list'));\n});"],"sourceRoot":""}